name: 🚀 CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]  # Must exactly match your CI workflow name
    types:
      - completed
    branches:
      - dev  # Trigger only when CI runs on dev branch

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: ✅ CD Trigger Test
        run: echo "CD triggered via workflow_run on dev branch!"

      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- DEBUG KEY LENGTH ---
      - name: 🔑 Debug private key length
        run: |
          echo "Checking DEV_PI_KEY size..."
          echo "${{ secrets.DEV_PI_KEY }}" | wc -c

      # --- SETUP SSH KEY ---
      - name: 🔑 Setup SSH Key for Raspberry Pi
        run: |
          if [ -z "${{ secrets.DEV_PI_KEY }}" ]; then
            echo "❌ DEV_PI_KEY is empty!"
            exit 1
          else
            echo "✅ DEV_PI_KEY exists"
          fi
          mkdir -p ~/.ssh
          printf "%s\n" "${{ secrets.DEV_PI_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -p 2225 -H ${{ secrets.DEV_PI_HOST }} >> ~/.ssh/known_hosts

      # --- TEST SSH CONNECTION ---
      - name: 🔍 Test SSH Connection
        run: ssh -vvv -o StrictHostKeyChecking=no -p 2225 ${{ secrets.DEV_PI_USER }}@${{ secrets.DEV_PI_HOST }} "echo 'Connected successfully!'"

      - name: 🔐 Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 🏗 Build Multi-Architecture Images
        run: |
          echo "🐳 Building multi-arch frontend image (x86_64 + ARM64)..."
          docker buildx build --platform linux/amd64,linux/arm64 \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/ukshati-frontend:${{ github.sha }} \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/ukshati-frontend:latest \
            --push .

          echo "🐳 Building multi-arch MySQL image (x86_64 + ARM64)..."
          docker buildx build --platform linux/amd64,linux/arm64 \
            -f Dockerfile.mysql \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/ukshati-database:${{ github.sha }} \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/ukshati-database:latest \
            --push .

      - name: 🚀 Deploy to Raspberry Pi
        run: |
          echo "🍓 Deploying to Raspberry Pi..."

          cat > deploy.sh << 'EOF'
          #!/bin/bash
          set -euxo pipefail

          echo "🔄 Stopping existing containers..."
          docker-compose down || true

          echo "🧹 Cleaning up old images..."
          docker image prune -f

          echo "📥 Pulling latest images..."
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/ukshati-frontend:${{ github.sha }}
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/ukshati-database:${{ github.sha }}

          echo "🔄 Updating docker-compose.yml with new image tags..."
          sed -i 's|image: .*ukshati-frontend.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/ukshati-frontend:${{ github.sha }}|g' docker-compose.yml
          sed -i 's|image: .*ukshati-database.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/ukshati-database:${{ github.sha }}|g' docker-compose.yml

          echo "🚀 Starting updated containers..."
          docker-compose up -d
          sleep 30
          docker-compose ps
          echo "✅ Deployment completed!"
          EOF

          # Copy deploy script to Raspberry Pi (correct directory)
          scp -o StrictHostKeyChecking=no -P 2225 deploy.sh \
            ${{ secrets.DEV_PI_USER }}@${{ secrets.DEV_PI_HOST }}:/home/${{ secrets.DEV_PI_USER }}/Ukshati.2.0/deploy.sh

          # Run deploy script remotely on the Pi (correct directory)
          ssh -o StrictHostKeyChecking=no -p 2225 \
            ${{ secrets.DEV_PI_USER }}@${{ secrets.DEV_PI_HOST }} \
            "cd /home/${{ secrets.DEV_PI_USER }}/Ukshati.2.0 && chmod +x deploy.sh && ./deploy.sh"

      - name: 📢 Notify Success
        if: success()
        run: echo "🎉 Deployment completed successfully!"

      - name: 📢 Notify Failure
        if: failure()
        run: echo "❌ Deployment failed!"
